// Copyright (C) Microsoft Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// These are the WebView2 experimental APIs published publicly as a part of the
// WebView2 prerelease package. Modifications to any published interface require
// a breaking change for the experimental APIs. Otherwise, do not modify
// published interfaces.

// midl is run from a tools directory with no special include paths setup.
// To import an IDL from the build you must get out of the tools path
// first.
// We include the shipping webview2.idl so that our preview APIs may
// interact with our public APIs.
import "../../edge_embedded_browser/client/win/current/webview2.idl";

[uuid(07abc5eb-fae4-4485-bf29-083ac335408b), version(1.0)]
library WebView2Experimental {

// Forward declarations

interface ICoreWebView2Experimental16;
interface ICoreWebView2Experimental18;
interface ICoreWebView2Experimental19;
interface ICoreWebView2Experimental20;
interface ICoreWebView2Experimental22;
interface ICoreWebView2Experimental23;
interface ICoreWebView2ExperimentalCompositionController4;
interface ICoreWebView2ExperimentalClearCustomDataPartitionCompletedHandler;
interface ICoreWebView2ExperimentalEnvironment3;
interface ICoreWebView2ExperimentalExecuteScriptResult;
interface ICoreWebView2ExperimentalExecuteScriptWithResultCompletedHandler;
interface ICoreWebView2ExperimentalScriptException;
interface ICoreWebView2ExperimentalEnvironment10;
interface ICoreWebView2ExperimentalEnvironment13;
interface ICoreWebView2ExperimentalFrame4;
interface ICoreWebView2ExperimentalFrame5;
interface ICoreWebView2ExperimentalFrameInfo;
interface ICoreWebView2ExperimentalGetProcessExtendedInfosCompletedHandler;
interface ICoreWebView2ExperimentalProcessExtendedInfo;
interface ICoreWebView2ExperimentalProcessExtendedInfoCollection;
interface ICoreWebView2ExperimentalProfile7;
interface ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler;
interface ICoreWebView2ExperimentalUpdateRuntimeResult;
interface ICoreWebView2ExperimentalWebResourceRequestedEventArgs;
interface ICoreWebView2ExperimentalNavigationStartingEventArgs2;
interface ICoreWebView2ExperimentalRenderAdapterLUIDChangedEventHandler;
interface ICoreWebView2ExperimentalTextureStream;
interface ICoreWebView2ExperimentalTexture;
interface ICoreWebView2ExperimentalTextureStreamErrorReceivedEventArgs;
interface ICoreWebView2ExperimentalTextureStreamErrorReceivedEventHandler;
interface ICoreWebView2ExperimentalTextureStreamStartRequestedEventHandler;
interface ICoreWebView2ExperimentalTextureStreamStoppedEventHandler;
interface ICoreWebView2ExperimentalTextureStreamWebTextureReceivedEventArgs;
interface ICoreWebView2ExperimentalTextureStreamWebTextureReceivedEventHandler;
interface ICoreWebView2ExperimentalTextureStreamWebTextureStreamStoppedEventHandler;
interface ICoreWebView2ExperimentalWebTexture;
interface ICoreWebView2ExperimentalNotification;
interface ICoreWebView2ExperimentalNotificationClosedEventHandler;
interface ICoreWebView2ExperimentalNotificationReceivedEventHandler;
interface ICoreWebView2ExperimentalNotificationReceivedEventArgs;

// Enums and structs
/// Specifies the source of `WebResourceRequested` event.
[v1_enum]
typedef enum COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS {
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_NONE = 0,

  /// Indicates that web resource is requested from main page including dedicated workers and iframes.
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_DOCUMENT = 1,

  /// Indicates that web resource is requested from shared worker.
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SHARED_WORKER = 2,

  /// Indicates that web resource is requested from service worker.
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SERVICE_WORKER = 4,

  /// Indicates that web resource is requested from any supported source.
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_ALL = 0XFFFFFFFF
} COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS;
cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS)")

/// Matrix that represents a 3D transform. This transform is used to
/// calculate correct coordinates when calling
/// CreateCoreWebView2PointerInfoFromPointerId. This is equivalent to a
/// D2D1_MATRIX_4X4_F
typedef struct COREWEBVIEW2_MATRIX_4X4 {
  /// The value in the first row and first column of the matrix.
  FLOAT _11;
  /// The value in the first row and second column of the matrix.
  FLOAT _12;
  /// The value in the first row and third column of the matrix.
  FLOAT _13;
  /// The value in the first row and fourth column of the matrix.
  FLOAT _14;
  /// The value in the second row and first column of the matrix.
  FLOAT _21;
  /// The value in the second row and second column of the matrix.
  FLOAT _22;
  /// The value in the second row and third column of the matrix.
  FLOAT _23;
  /// The value in the second row and fourth column of the matrix.
  FLOAT _24;
  /// The value in the third row and first column of the matrix.
  FLOAT _31;
  /// The value in the third row and second column of the matrix.
  FLOAT _32;
  /// The value in the third row and third column of the matrix.
  FLOAT _33;
  /// The value in the third row and fourth column of the matrix.
  FLOAT _34;
  /// The value in the fourth row and first column of the matrix.
  FLOAT _41;
  /// The value in the fourth row and second column of the matrix.
  FLOAT _42;
  /// The value in the fourth row and third column of the matrix.
  FLOAT _43;
  /// The value in the fourth row and fourth column of the matrix.
  FLOAT _44;
} COREWEBVIEW2_MATRIX_4X4;

/// Indicates the text direction of the notification.
[v1_enum]
typedef enum COREWEBVIEW2_TEXT_DIRECTION_KIND {
  /// Indicates that the notification text direction adopts the browser's language setting behavior.
  COREWEBVIEW2_TEXT_DIRECTION_KIND_DEFAULT,

  /// Indicates that the notification text is left-to-right.
  COREWEBVIEW2_TEXT_DIRECTION_KIND_LEFT_TO_RIGHT,

  /// Indicates that the notification text is right-to-left.
  COREWEBVIEW2_TEXT_DIRECTION_KIND_RIGHT_TO_LEFT,
} COREWEBVIEW2_TEXT_DIRECTION_KIND;

/// Status of UpdateRuntime operation result.
[v1_enum]
typedef enum COREWEBVIEW2_UPDATE_RUNTIME_STATUS {
  /// Latest version of Edge WebView2 Runtime is installed.
  /// No update for Edge WebView2 Runtime is available, or Edge WebView2
  /// Runtime is updated successfully and latest version is now installed.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_LATEST_VERSION_INSTALLED,

  /// Edge WebView2 Runtime update is already running, which could be
  /// triggered by auto update or by other UpdateRuntime request from some app.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_UPDATE_ALREADY_RUNNING,

  /// Edge WebView2 Runtime update is blocked by group policy.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_BLOCKED_BY_POLICY,

  /// Edge WebView2 Runtime update failed.
  /// See `ExtendedError` property of UpdateRuntimeResult for more
  /// information about the failure.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED,
} COREWEBVIEW2_UPDATE_RUNTIME_STATUS;

/// Kinds of errors that can be reported by the
/// `ICoreWebView2ExperimentalTextureStream ErrorReceived` event.
[v1_enum]
typedef enum COREWEBVIEW2_TEXTURE_STREAM_ERROR_KIND {
  /// CreateTexture/PresentTexture and so on should return failed HRESULT if
  /// the texture stream is in the stopped state rather than using the
  /// error event. But there can be edge cases where the browser process
  /// knows the texture stream is in the stopped state and the host app
  /// process texture stream doesn't yet know that. Like the 10 second issue
  /// or if the script side has stopped the stream.
  COREWEBVIEW2_TEXTURE_STREAM_ERROR_NO_VIDEO_TRACK_STARTED,
  /// The texture already has been removed using CloseTexture.
  COREWEBVIEW2_TEXTURE_STREAM_ERROR_TEXTURE_ERROR,
  /// The texture to be presented is already in use for rendering.
  /// Call GetAvailableTexture to determine an available texture to present.
  /// The developer can technically call PresentTexture multiple times,
  /// but the first call make input texture "in use" until the browser
  /// renders it and returns the texture as "recycle" so that it can be a member
  /// of available textures.
  COREWEBVIEW2_TEXTURE_STREAM_ERROR_TEXTURE_IN_USE,
} COREWEBVIEW2_TEXTURE_STREAM_ERROR_KIND;

/// Indicates the frame type used in the `ICoreWebView2ExperimentalFrameInfo` interface.
[v1_enum]
typedef enum COREWEBVIEW2_FRAME_KIND {
  /// Indicates that the frame is an unknown type frame. We may extend this enum
  /// type to identify more frame kinds in the future.
  COREWEBVIEW2_FRAME_KIND_UNKNOWN,
  /// Indicates that the frame is a primary main frame(webview).
  COREWEBVIEW2_FRAME_KIND_MAIN_FRAME,
  /// Indicates that the frame is an iframe.
  COREWEBVIEW2_FRAME_KIND_IFRAME,
  /// Indicates that the frame is an embed element.
  COREWEBVIEW2_FRAME_KIND_EMBED,
  /// Indicates that the frame is an object element.
  COREWEBVIEW2_FRAME_KIND_OBJECT,
} COREWEBVIEW2_FRAME_KIND;

// End of enums and structs

/// The UpdateRuntime operation result.
[uuid(DD503E49-AB19-47C0-B2AD-6DDD09CC3E3A), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalUpdateRuntimeResult : IUnknown {

  /// The status for the UpdateRuntime operation.
  [propget] HRESULT Status(
      [out, retval] COREWEBVIEW2_UPDATE_RUNTIME_STATUS* status);

  /// The update error that occurred while trying to update Edge WebView2 Runtime.
  /// ExtendedError will be S_OK if Status is not `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED`
  /// or `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_BLOCKED_BY_POLICY`.
  [propget] HRESULT ExtendedError([out, retval] HRESULT* error);
}

/// The caller implements this interface to receive the UpdateRuntime result.
[uuid(F1D2D722-3721-499C-87F5-4C405260697A), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler : IUnknown {

  /// Provides the result for the UpdateRuntime operation.
  /// `errorCode` will be S_OK if the update operation can be performed
  /// normally, regardless of whether we could update the Edge WebView2
  /// Runtime. If an unexpected error interrupts the update operation, error
  /// code of that unexpected error would be set as `errorCode`.
  /// When update operation can be performed normally, but update resulted in
  /// failure, like download failed, the error code would be presented as
  /// `ExtendedError` property of ICoreWebView2ExperimentalUpdateRuntimeResult.
  HRESULT Invoke([in] HRESULT errorCode,
                 [in] ICoreWebView2ExperimentalUpdateRuntimeResult* result);
}

/// This interface is an extension of the ICoreWebView2Environment that manages
/// updating Edge WebView2 Runtime. An object implementing the
/// ICoreWebView2ExperimentalEnvironment3 interface will also implement
/// ICoreWebView2Environment.
[uuid(9A2BE885-7F0B-4B26-B6DD-C969BAA00BF1), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment3 : IUnknown {
  /// Try to update the installed Microsoft Edge WebView2 Runtime.
  /// This will potentially result in a new version of the Edge WebView2
  /// Runtime being installed and `NewBrowserVersionAvailable` event being raised.
  /// There is no guarantee on the order of that event being raised and
  /// UpdateRuntime's completed handler being invoked. Besides the
  /// `NewBrowserVersionAvailable` event, there will be no impact to any
  /// currently running WebView2s when the update is installed.
  /// Even though the Edge WebView2 Runtime update is installed for the machine
  /// and available to all users, the update will happen silently and not show
  /// elevation prompt.
  /// This will not impact Edge browser installations.
  /// The latest version can always be queried using the
  /// `GetAvailableCoreWebView2BrowserVersionString` API.
  /// The UpdateRuntime method is only supported for an installed Edge WebView2
  /// Runtime. When running a fixed version Edge WebView2 Runtime or non stable
  /// channel Edge browser, this API will return `HRESULT_FROM_WIN32(ERROR_NOT_SUPPORTED)`.
  /// There could only be one active UpdateRuntime operation in an app process,
  /// and calling this API before the completed handler for a previous call is invoked
  /// will fail with `HRESULT_FROM_WIN32(ERROR_BUSY)`.
  /// Calling this API repeatedly in a short period of time, will also fail with
  /// `HRESULT_FROM_WIN32(ERROR_BUSY)`. To protect accidental abuse of the update
  /// service, the implementation throttles the calls of this API to 3 times within
  /// 5 minutes in a process. The exact throttling limit can change in the future.
  /// Edge update service can only support one update request at a time globally.
  /// If there is already an update operation running in the Edge update service,
  /// UpdateRuntime request will result in the completed handler being invoked with a
  /// result that has `Status` of `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_UPDATE_ALREADY_RUNNING`.
  /// As the running update could succeed or fail, the app should retry later if
  /// `NewBrowserVersionAvailable` event has not been raised.
  /// The UpdateRuntime operation is associated with the CoreWebView2Environment
  /// object and any ongoing UpdateRuntime operation will be aborted when the
  /// associated CoreWebView2Environment along with the CoreWebView2 objects that
  /// are created by the CoreWebView2Environment object are all released. In this
  /// case, the completed handler will be invoked with `S_OK` as `errorCode` and a
  /// result object with `Status` of COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED and
  /// `ExtendedError` as `E_ABORT`.
  ///
  /// \snippet AppWindow.cpp UpdateRuntime
  HRESULT UpdateRuntime(
      [in] ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler* handler);
}

/// This interface is an extension of the ICoreWebView2CompositionController.
/// An object implementing ICoreWebView2ExperimentalCompositionController4
/// interface will also implement ICoreWebView2CompositionController.
[uuid(e6041d7f-18ac-4654-a04e-8b3f81251c33), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalCompositionController4 : IUnknown {
  /// Returns the UI Automation Provider for the WebView.
  [propget] HRESULT AutomationProvider([out, retval] IUnknown** provider);

  /// A helper function to convert a pointerId received from the system into
  /// an ICoreWebView2ExperimentalPointerInfo.
  /// parentWindow is the HWND that contains the WebView. This can be any HWND
  /// in the hwnd tree that contains the WebView.
  /// The COREWEBVIEW2_MATRIX_4X4 is the transform from that HWND to the WebView.
  /// The returned ICoreWebView2ExperimentalPointerInfo is used in SendPointerInfo.
  /// The pointer type must be either pen or touch or the function will fail.
  HRESULT CreateCoreWebView2PointerInfoFromPointerId(
      [in] UINT pointerId,
      [in] HWND parentWindow,
      [in] struct COREWEBVIEW2_MATRIX_4X4 transform,
      [out, retval] ICoreWebView2PointerInfo** pointerInfo);
}

/// This interface is an extension of `ICoreWebView2` that allows to
/// set filters in order to receive WebResourceRequested events for
/// service workers, shared workers and different origin iframes.
[uuid(679ddf3f-9044-486f-8458-16653a0e1603), object, pointer_default(unique)]
interface ICoreWebView2Experimental16 : IUnknown {
  /// A web resource request with a resource context that matches this
  /// filter's resource context and a URI that matches this filter's URI
  /// wildcard string for corresponding request sources will be raised via
  /// the `WebResourceRequested` event. To receive all raised events filters
  /// have to be added before main page navigation.
  ///
  /// The `uri` parameter value is a wildcard string matched against the URI
  /// of the web resource request. This is a glob style
  /// wildcard string in which a `*` matches zero or more characters and a `?`
  /// matches exactly one character.
  /// These wildcard characters can be escaped using a backslash just before
  /// the wildcard character in order to represent the literal `*` or `?`.
  ///
  /// The matching occurs over the URI as a whole string and not limiting
  /// wildcard matches to particular parts of the URI.
  /// The wildcard filter is compared to the URI after the URI has been
  /// normalized, any URI fragment has been removed, and non-ASCII hostnames
  /// have been converted to punycode.
  ///
  /// Specifying a `nullptr` for the uri is equivalent to an empty string which
  /// matches no URIs.
  ///
  /// For more information about resource context filters, navigate to
  /// [COREWEBVIEW2_WEB_RESOURCE_CONTEXT](/microsoft-edge/webview2/reference/win32/icorewebview2#corewebview2_web_resource_context).
  ///
  /// The `requestSourceKinds` is a mask of one or more
  /// `COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS`. OR operation(s) can be
  /// applied to multiple `COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS` to
  /// create a mask representing those data types. API returns `E_INVALIDARG` if
  /// `requestSourceKinds` equals to zero. For more information about request
  /// source kinds, navigate to
  /// [COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS](/microsoft-edge/webview2/reference/win32/icorewebview2#corewebview2_web_resource_request_source_kinds).
  ///
  /// Because service workers and shared workers run separately from any one
  /// HTML document their WebResourceRequested will be raised for all
  /// CoreWebView2s that have appropriate filters added in the corresponding
  /// CoreWebView2Environment. You should only add a WebResourceRequested filter
  /// for COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SERVICE_WORKER or
  /// COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SHARED_WORKER on
  /// one CoreWebView2 to avoid handling the same WebResourceRequested
  /// event multiple times.
  ///
  /// | URI Filter String | Request URI | Match | Notes |
  /// | ---- | ---- | ---- | ---- |
  /// | `*` | `https://contoso.com/a/b/c` | Yes | A single * will match all URIs |
  /// | `*://contoso.com/*` | `https://contoso.com/a/b/c` | Yes | Matches everything in contoso.com across all schemes |
  /// | `*://contoso.com/*` | `https://example.com/?https://contoso.com/` | Yes | But also matches a URI with just the same text anywhere in the URI |
  /// | `example` | `https://contoso.com/example` | No | The filter does not perform partial matches |
  /// | `*example` | `https://contoso.com/example` | Yes | The filter matches across URI parts |
  /// | `*example` | `https://contoso.com/path/?example` | Yes | The filter matches across URI parts |
  /// | `*example` | `https://contoso.com/path/?query#example` | No | The filter is matched against the URI with no fragment |
  /// | `*example` | `https://example` | No | The URI is normalized before filter matching so the actual URI used for comparison is `https://example/` |
  /// | `*example/` | `https://example` | Yes | Just like above, but this time the filter ends with a / just like the normalized URI |
  /// | `https://xn--qei.example/` | `https://&#x2764;.example/` | Yes | Non-ASCII hostnames are normalized to punycode before wildcard comparison |
  /// | `https://&#x2764;.example/` | `https://xn--qei.example/` | No | Non-ASCII hostnames are normalized to punycode before wildcard comparison |
  ///
  /// \snippet ScenarioSharedWorkerWRR.cpp WebResourceRequested2
  HRESULT AddWebResourceRequestedFilterWithRequestSourceKinds(
    [in] LPCWSTR const uri,
    [in] COREWEBVIEW2_WEB_RESOURCE_CONTEXT const resourceContext,
    [in] COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS const requestSourceKinds);

  /// Removes a matching WebResource filter that was previously added for the
  /// `WebResourceRequested` event.  If the same filter was added multiple
  /// times, then it must be removed as many times as it was added for the
  /// removal to be effective. Returns `E_INVALIDARG` for a filter that was
  /// not added or is already removed.
  /// If the filter was added for multiple requestSourceKinds and removed just for one of them
  /// the filter remains for the non-removed requestSourceKinds.
  HRESULT RemoveWebResourceRequestedFilterWithRequestSourceKinds(
      [in] LPCWSTR const uri,
      [in] COREWEBVIEW2_WEB_RESOURCE_CONTEXT const resourceContext,
      [in] COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS const requestSourceKinds);
 }

/// Event args for the `WebResourceRequested` event.
[uuid(8f3ec528-0596-4d51-9f9e-2da580ac9787), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalWebResourceRequestedEventArgs : IUnknown {
  /// The web resource requested source.
  [propget] HRESULT RequestedSourceKind(
  [out, retval] COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS* requestedSourceKind);
}

/// This interface represents a JavaScript exception.
/// If the CoreWebView2.ExecuteScriptWithResult result has Succeeded as false,
/// you can use the result's Exception property to get the script exception.
[uuid(054DAE00-84A3-49FF-BC17-4012A90BC9FD), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalScriptException : IUnknown {
  /// The line number of the source where the exception occurred.
  /// In the JSON it is `exceptionDetail.lineNumber`.
  /// Note that this position starts at 0.
  [propget] HRESULT LineNumber([out, retval] UINT32* value);

  /// The column number of the source where the exception occurred.
  /// In the JSON it is `exceptionDetail.columnNumber`.
  /// Note that this position starts at 0.
  [propget] HRESULT ColumnNumber([out, retval] UINT32* value);
  /// The Name is the exception's class name.
  /// In the JSON it is `exceptionDetail.exception.className`.
  /// This is the empty string if the exception doesn't have a class name.
  /// This can happen if the script throws a non-Error object such as `throw "abc";`
  [propget] HRESULT Name([out, retval] LPWSTR* value);
  /// The Message is the exception's message and potentially stack.
  /// In the JSON it is exceptionDetail.exception.description.
  /// This is the empty string if the exception doesn't have a description.
  /// This can happen if the script throws a non-Error object such as throw "abc";.
  [propget] HRESULT Message([out, retval] LPWSTR* value);
  /// This will return all details of the exception as a JSON string.
  /// In the case that script has thrown a non-Error object such as `throw "abc";`
  /// or any other non-Error object, you can get object specific properties.
  [propget] HRESULT ToJson([out, retval] LPWSTR* value);
}
/// This is the result for ExecuteScriptWithResult.
[uuid(0CE15963-3698-4DF7-9399-71ED6CDD8C9F), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalExecuteScriptResult : IUnknown {
  /// This property is true if ExecuteScriptWithResult successfully executed script with
  /// no unhandled exceptions and the result is available in the ResultAsJson property
  /// or via the TryGetResultAsString method.
  /// If it is false then the script execution had an unhandled exception which you
  /// can get via the Exception property.
  [propget] HRESULT Succeeded([out, retval] BOOL* value);
  /// A function that has no explicit return value returns undefined. If the
  /// script that was run throws an unhandled exception, then the result is
  /// also "null". This method is applied asynchronously. If the method is
  /// run before `ContentLoading`, the script will not be executed
  /// and the string "null" will be returned.

  /// The return value description is as follows
  /// 1. S_OK: Execution succeeds.
  /// 2. E_POINTER: When the `jsonResult` is nullptr.
  [propget] HRESULT ResultAsJson([out, retval] LPWSTR* jsonResult);
  /// If Succeeded is true and the result of script execution is a string, this method provides the value of the string result,
  /// and we will get the `FALSE` var value when the js result is not string type.

  /// The return value description is as follows
  /// 1. S_OK: Execution succeeds.
  /// 2. E_POINTER: When the `stringResult` or `value` is nullptr.
  /// NOTE: If the `value` returns `FALSE`, the `stringResult` will be set to a empty string.
  HRESULT TryGetResultAsString([out] LPWSTR* stringResult, [out] BOOL* value);
  /// If Succeeded is false, you can use this property to get the unhandled exception thrown by script execution
  /// Note that due to the compatibility of the WinRT/.NET interface,
  /// S_OK will be returned even if the acquisition fails.
  /// We can determine whether the acquisition is successful by judging whether the `exception` is nullptr.
  [propget] HRESULT Exception(
      [out, retval] ICoreWebView2ExperimentalScriptException** exception);
}
/// This is the callback for ExecuteScriptWithResult
[uuid(1BB5317B-8238-4C67-A7FF-BAF6558F289D), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalExecuteScriptWithResultCompletedHandler : IUnknown {
  /// Provides the result of ExecuteScriptWithResult
  HRESULT Invoke(
      [in] HRESULT errorCode,
      [in] ICoreWebView2ExperimentalExecuteScriptResult* result);
}
/// This is the interface for getting string and exception with ExecuteScriptWithResult
[uuid(4C765E35-5BEB-4631-B931-5E52D9B0A9BE), object, pointer_default(unique)]
interface ICoreWebView2Experimental19 : IUnknown {

  /// Run JavaScript code from the JavaScript parameter in the current
  /// top-level document rendered in the WebView.
  /// The result of the execution is returned asynchronously in the CoreWebView2ExecuteScriptResult object
  /// which has methods and properties to obtain the successful result of script execution as well as any
  /// unhandled JavaScript exceptions.
  /// If this method is
  /// run after the NavigationStarting event during a navigation, the script
  /// runs in the new document when loading it, around the time
  /// ContentLoading is run. This operation executes the script even if
  /// ICoreWebView2Settings::IsScriptEnabled is set to FALSE.
  ///
  /// \snippet ScriptComponent.cpp ExecuteScriptWithResult
  HRESULT ExecuteScriptWithResult(
      [in] LPCWSTR javaScript,
      [in] ICoreWebView2ExperimentalExecuteScriptWithResultCompletedHandler* handler);
}

/// This is the ICoreWebView2 experimental interface for custom data partition.
[uuid(5A4D0ECF-3FE5-4456-ACE5-D317CCA0EFF1), object, pointer_default(unique)]
interface ICoreWebView2Experimental20 : IUnknown {
  /// Gets the `CustomDataPartitionId` property.
  [propget] HRESULT CustomDataPartitionId([out, retval] LPWSTR* customDataPartitionId);

  /// Sets the `CustomDataPartitionId` property.
  /// This API requires enabling 2 experimental browser features to work properly.
  /// These features will be enabled by default in the future.
  /// Before these features are enabled by default, please enable them by ensuring
  /// `--enable-features=ThirdPartyStoragePartitioning,PartitionedCookies` is set in
  /// `AdditionalBrowserArguments` in `CoreWebView2EnvironmentOptions` used to create
  /// CoreWebView2Environment. If these features are not enabled, all data are treated
  /// as unpartitioned and stored in the global default location for the profile.
  /// When it is set, the page in the WebView will act as if the page were hosted in a
  /// top level site uniquely associated with the `customDataPartitionId  ` and have a separate
  /// storage partition as described in https://developer.chrome.com/docs/privacy-sandbox/storage-partitioning/
  /// and separate cookie partition as described in https://developer.chrome.com/docs/privacy-sandbox/chips/
  /// with all cookies partitioned.
  /// If `customDataPartitionId` is nullptr or empty string, the page inside the
  /// WebView will work normally with data treated as unpartitioned.
  /// The `customDataPartitionId` parameter is case sensitive. The default is
  /// an empty string. There is no restriction on the length or what characters
  /// can be used in partition id.
  /// The change of the custom data partition id will be applied to new
  /// page or iframe navigations and not impact existing pages and iframes.
  /// To avoid accidentally using the new partition id for new page or iframe navigations
  /// started by the old page, it is recommended to create a new WebView for new partition
  /// instead of changing partition. If you really have to change partition, it is
  /// recommended to navigate to a blank page before setting the new partition
  /// id and navigating to a page with the new partition.
  ///
  /// As setting custom data partition id does not change DOM security
  /// model, developers should be very careful for WebViews with opener and
  /// opened window relationship, especially when the pages in the WebViews
  /// have same origin, like when the opened window is the same website or
  /// about:blank. The pages in these WebViews can access each other’s DOM and
  /// therefore can potentially access DOM storage and cookies in different
  /// partition for the same website. It is recommended to set the same custom
  /// data partition id for these WebViews, unless there is an absolute need
  /// to set different partition ids and only trusted code is hosted in them.
  ///
  /// \snippet AppWindow.cpp CreateCoreWebView2EnvironmentWithOptions
  ///
  /// \snippet SettingsComponent.cpp CustomDataPartitionId
  [propput] HRESULT CustomDataPartitionId([in] LPCWSTR customDataPartitionId);
}

/// This is the ICoreWebView2 experimental profile interface.
[uuid(11A14762-7780-46A1-A1C3-73DE812DAE12), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalProfile7 : IUnknown {
  /// Clears all DOM storage and cookies in the custom data partition
  /// identified by the `customDataPartitionId`.
  /// If `customDataPartitionId` is nullptr or empty string, the API will fail with
  /// E_INVALIDARG. If no partition is found for the specified `customDataPartitionId`,
  /// the API succeeds without doing anything.
  /// As DOM storage and cookies in the custom data partition is also browsing
  /// data, they will also be cleared when `ClearBrowsingData`,
  /// `ClearBrowsingDataInTimeRange` or `ClearBrowsingDataAll` is called and
  /// the clearing condition is met.
  ///
  /// \snippet AppWindow.cpp ClearCustomDataPartition
  HRESULT ClearCustomDataPartition(
      [in] LPCWSTR customDataPartitionId,
      [in] ICoreWebView2ExperimentalClearCustomDataPartitionCompletedHandler* handler);
}

/// The caller implements this interface to receive the ClearCustomDataPartition result.
[uuid(FE753727-5758-4FEA-8CAD-1E685B9C3AE8), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalClearCustomDataPartitionCompletedHandler : IUnknown {

  /// Provide the completion status of the corresponding asynchronous method.
  HRESULT Invoke([in] HRESULT errorCode);
}

/// This is ICoreWebView2ExperimentalEnvironment12 that returns the texture
/// stream interface.
[uuid(96c27a45-f142-4873-80ad-9d0cd899b2b9), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment12 : IUnknown {
  /// Registers the stream id that the host can handle, providing a
  /// texture stream when requested from the WebView2's JavaScript code.
  /// The host can register multiple unique stream instances, each with
  /// a unique stream ID, enabling the host to stream from different sources
  /// concurrently.
  /// The host should call this only once for unique streamId. The second
  /// call of already created streamId without destroying
  /// ICoreWebView2ExperimentalTextureStream object will return an error.
  /// 'd3dDevice' is used for creating shared IDXGI resource and NT shared
  /// of it. The host should use Adapter of the LUID from the GetRenderAdapterLUID
  /// for creating the D3D Device.
  HRESULT CreateTextureStream(
      [in] LPCWSTR streamId,
      [in] IUnknown* d3dDevice,
      [out, retval ] ICoreWebView2ExperimentalTextureStream** value);
  /// Get the graphics adapter LUID of the renderer. The host should use this
  /// LUID adapter when creating D3D device to use with CreateTextureStream().
  [propget] HRESULT RenderAdapterLUID([out, retval] UINT64* value);
  /// Listens for change of graphics adapter LUID of the browser.
  /// The host can get the updated LUID by RenderAdapterLUID. It is expected
  /// that the host updates texture's d3d Device with SetD3DDevice,
  /// removes existing textures and creates new texture.
  HRESULT add_RenderAdapterLUIDChanged(
      [in] ICoreWebView2ExperimentalRenderAdapterLUIDChangedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);
  /// Remove listener for RenderAdapterLUIDChange event.
  HRESULT remove_RenderAdapterLUIDChanged(
      [in] EventRegistrationToken token);
}

/// This is the interface that handles texture streaming.
[uuid(afca8431-633f-4528-abfe-7fc3bedd8962), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalTextureStream : IUnknown {
  /// Get the stream ID of the object that is used when calling CreateTextureStream.
  /// The caller must free the returned string with CoTaskMemFree. See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT Id([out, retval] LPWSTR* value);
  /// Adds an allowed URI origin. The stream requests could be made from
  /// any frame, including iframes, but the origin of the page in the frames
  /// must be registered first in order for the request to succeed.
  /// The added origin will be persistent until
  /// ICoreWebView2ExperimentalTextureStream is destroyed or
  /// RemoveAllowedOrigin is called.
  /// The renderer does not support wildcard so it will compare
  /// literal string input to the requesting frame's page's origin after
  /// normalization. The page origin will be normalized so ASCII characters
  /// in the scheme and hostname will be lowercased, and non-ASCII characters
  /// in the hostname will be normalized to their punycode form.
  /// For example `HTTPS://WWW.ㄓ.COM` will be normalized to
  /// `https://www.xn--kfk.com` for comparison. So, the input string
  /// should have a scheme like `https://`. For example,
  /// `https://www.valid-host.com`, `http://www.valid-host.com` are
  /// valid origins but `www.valid-host.com`, or `https://*.valid-host.com.` are not
  /// valid origins. If invalid origin is provided, the API will return an error
  /// of E_INVALIDARG.
  /// getTextureStream() will fail unless the requesting frame's origin URI is
  /// added to the allowed origins.
  /// If `value` is TRUE, then the origin will also be added to WebTexture's
  /// allowed origin.
  HRESULT AddAllowedOrigin([in] LPCWSTR origin, [in] BOOL value);
  /// Remove added origin, which was added by AddAllowedOrigin.
  /// The allowed or disallowed origins will take effect only when Javascript
  /// request a streaming. So, once the streaming started, it does not stop
  /// streaming.
  HRESULT RemoveAllowedOrigin([in] LPCWSTR origin);
  /// Listens for stream requests from the Javascript's getTextureStream call
  /// for this stream's id. It is called for the first request only, and will
  /// not be called with subsequent requests of same stream id from any pages
  /// in the middle of request handling or after it returns success.
  /// The request is regarded as success only when the host provides the stream,
  /// Present API call, within 10s after being requested.

  /// The texture stream becomes 'Started' state once it starts sending a texture
  /// until it calls Stop API or receives 'Stopped' event.
  HRESULT add_StartRequested(
      [in] ICoreWebView2ExperimentalTextureStreamStartRequestedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);
  /// Remove listener for StartRequest event.
  HRESULT remove_StartRequested(
      [in] EventRegistrationToken token);
  /// Listen to stop stream request once the stream started.
  /// It is called when user stop all streaming requests from
  /// the renderers (Javascript) or the host calls the Stop API. The renderer
  /// can stream again by calling the streaming request API.
  /// The renderer cleared all registered Textures before sending
  /// the stop request event so that the callback of the next start request
  /// should register the textures again.
  /// The event is triggered when all requests for given stream id closed
  /// by the Javascript, or the host's Stop API call.
  /// texture related API calls after this event will return an error
  /// of HRESULT_FROM_WIN32(ERROR_INVALID_STATE).
  HRESULT add_Stopped(
      [in] ICoreWebView2ExperimentalTextureStreamStoppedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);
  /// Remove listener for Stopped event.
  HRESULT remove_Stopped(
      [in] EventRegistrationToken token);
  /// Creates texture that will be referenced by the host and the browser.
  /// By using the texture mechanism, the host does not have to
  /// send respective texture to the renderer, instead it notifies it
  /// with internal texture id, which is the identity of the texture.
  /// The texture is 2D texture, IDXGIResource, format and will be
  /// exposed through shared HANDLE or IUnknown type through ICoreWebView2ExperimentalTexture.
  /// Whenever the host has new texture to write, it should ask
  /// reusable ICoreWebView2ExperimentalTexture from the GetAvailableTexture,
  /// which returns ICoreWebView2ExperimentalTexture.
  /// If the GetAvailableTexture returns an error, then the host calls the
  /// CreateTexture to allocate new texture.
  /// The API also registers created shared handle to the browser once it
  /// created the resource.
  ///
  /// Unit for width and height is texture unit (in texels)
  /// [D3D11_TEXTURE2D_DESC](/windows/win32/api/d3d11/ns-d3d11-d3d11_texture2d_desc).
  HRESULT CreateTexture(
    [in] UINT32 widthInTexels,
    [in] UINT32 heightInTexels,
    [out, retval] ICoreWebView2ExperimentalTexture** texture);
  /// Returns reuseable texture for video frame rendering.
  /// Once the renderer finishes rendering of texture's video frame, which
  /// was requested by Present, the renderer informs the host so that it can
  /// be reused. The host has to create new texture with CreateTexture
  /// if the API return an error HRESULT_FROM_WIN32(ERROR_NO_MORE_ITEMS).
  HRESULT GetAvailableTexture([out, retval] ICoreWebView2ExperimentalTexture** texture);
  /// Removes texture when the host removes the backed 2D texture.
  /// The host can save the resources by deleting 2D textures
  /// when it changes the frame sizes. The API will send a message
  /// to the browser where it will remove texture.
  HRESULT CloseTexture([in] ICoreWebView2ExperimentalTexture* texture);
  /// Adds the provided `ICoreWebView2Texture` to the video stream as the
  /// next frame. The `ICoreWebView2Texture` must not be closed.
  /// The `ICoreWebView2Texture` must have been obtained via a call to
  /// `ICoreWebView2TextureStream::GetAvailableTexture` or `
  /// ICoreWebView2TextureStream::CreateTexture` from this `ICoreWebView2TextureStream`.
  /// If the `ICoreWebView2Texture` is closed or was created from a different
  /// `ICoreWebView2TextureStream` this method will return `E_INVALIDARG`.
  /// You should write your video frame data to the `ICoreWebView2Texture`
  /// before calling this method.

  /// After this method completes WebView2 will take some time asynchronously
  /// to send the texture to the WebView2 processes to be added to the video stream.
  /// Do not close or otherwise change the provided `ICoreWebView2Texture` after
  /// calling this method. Doing so may result in the texture not being added to
  /// the texture stream and the `ErrorReceived` event may be raised.
  HRESULT PresentTexture([in] ICoreWebView2ExperimentalTexture* texture);

  /// Stops this texture stream from streaming and moves it into the stopped state.
  /// When moving to the stopped state the `ICoreWebView2TextureStream Stopped`
  /// event will be raised and in script the `MediaStreamTrack ended` event will
  /// be raised. Once stopped, script may again call `Webview.getTextureStream`
  /// moving the texture stream back to the start requested state.
  /// See the `StartRequested` event for details.

  /// Once stopped, calls to CreateTexture, GetAvailableTexture,
  /// PresentTexture, and CloseTexture will fail with
  /// HRESULT_FROM_WIN32(ERROR_INVALID_STATE).
  /// The `Stop` method is implicitly called when the texture stream object is
  /// destroyed.
  HRESULT Stop();
  /// The `ErrorReceived` event is raised when an error with this texture
  /// stream occurs asynchronously.
  HRESULT add_ErrorReceived(
      [in] ICoreWebView2ExperimentalTextureStreamErrorReceivedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);
  /// Remove listener for ErrorReceived event.
  HRESULT remove_ErrorReceived([in] EventRegistrationToken token);
  /// Set the D3D device this texture stream should use for creating shared
  /// texture resources. When the RenderAdapterLUIDChanged event is raised you
  /// should create a new D3D device using the RenderAdapterLUID property and
  /// call SetD3DDevice with the new D3D device.
  /// See the `CreateTextureStream` `d3dDevice` parameter for more details.
  HRESULT SetD3DDevice([in] IUnknown* d3dDevice);
  /// Event handler for receiving texture by Javascript.
  /// The WebTextureReceived event is raised when script sends a video frame to
  /// this texture stream. Allowed script will call `chrome.webview.
  /// registerTextureStream` to register a MediaStream with a specified texture
  /// stream. Video frames added to that MediaStream will be raised in the
  /// WebTextureReceived event. See `registerTextureStream` for details.
  /// Script is allowed to call registerTextureStream if it is from an HTML
  /// document with an origin allowed via
  /// `ICoreWebView2TextureStream::AddAllowedOrigin` with the
  /// `allowWebTexture` parameter set. See `AddAllowedOrigin` for details.
  HRESULT add_WebTextureReceived(
      [in] ICoreWebView2ExperimentalTextureStreamWebTextureReceivedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);
  /// Remove listener for WebTextureReceived event.
  HRESULT remove_WebTextureReceived([in] EventRegistrationToken token);
  /// The WebTextureStreamStopped event is raised when script unregisters its
  /// MediaStream from this texture stream. Script that has previously called
  /// `chrome.webview.registerTextureStream`, can call `chrome.webview.
  /// unregisterTextureStream` which will raise this event and then close
  /// associated ICoreWebView2WebTexture objects in the browser side. You should
  /// ensure that you release any references to associated
  /// ICoreWebView2WebTexture objects and their underlying resources.

  /// Once stopped, script may start again by calling `chrome.webview.
  /// registerTextureStream` and sending more frames. In this case the
  /// `ICoreWebView2TextureStream WebTextureReceived` event will be raised again.
  HRESULT add_WebTextureStreamStopped(
      [in] ICoreWebView2ExperimentalTextureStreamWebTextureStreamStoppedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);
  /// Remove listener for WebTextureStreamStopped event.
  HRESULT remove_WebTextureStreamStopped([in] EventRegistrationToken token);
}
/// texture that the host writes to so that the Renderer
/// will render on it.
[uuid(0836f09c-34bd-47bf-914a-99fb56ae2d07), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalTexture : IUnknown {
  /// A handle to OS shared memory containing the texture. You can open it
  /// with `ID3D11Device1::OpenSharedResource1` and write your texture data
  /// to it. Do not close it yourself. The underlying texture will be closed
  /// by WebView2. Do not change the texture after calling
  /// `ICoreWebView2TextureStream::PresentTexture` before you can retrieve it
  /// again with `GetAvailableTexture`, or you the frame may not be
  /// rendered and the `ICoreWebView2TextureStream ErrorReceived` event will
  /// be raised.
  [propget] HRESULT Handle([out, retval] HANDLE* value);
  /// Returns IUnknown type that could be query interface to IDXGIResource.
  /// The caller can write incoming texture to it.
  [propget] HRESULT Resource([out, retval] IUnknown** value);
  /// Gets timestamp of presenting texture.
  [propget] HRESULT Timestamp([out, retval] UINT64* value);
  /// Sets timestamp of presenting texture.
  /// `value` is video capture time with microseconds units.
  /// The value does not have to be exact captured time, but it should be
  /// increasing order because renderer (composition) ignores incoming
  /// video frame (texture) if its timestamp is equal or prior to
  /// the current compositing video frame. It also will be exposed to the
  /// JS with `VideoFrame::timestamp`.
  /// (https://docs.w3cub.com/dom/videoframe/timestamp.html).
  [propput] HRESULT Timestamp([in] UINT64 value);
}
/// This is the callback for new texture stream request.
[uuid(62d09330-00a9-41bf-a9ae-55aaef8b3c44), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalTextureStreamStartRequestedEventHandler : IUnknown {
  /// Called to provide the implementer with the event args for the
  /// corresponding event. There are no event args and the args
  /// parameter will be null.
  HRESULT Invoke(
      [in] ICoreWebView2ExperimentalTextureStream* sender,
      [in] IUnknown* args);
}
/// This is the callback for stop request of texture stream.
[uuid(4111102a-d19f-4438-af46-efc563b2b9cf), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalTextureStreamStoppedEventHandler : IUnknown {
  /// Called to provide the implementer with the event args for the
  /// corresponding event. There are no event args and the args
  /// parameter will be null.
  HRESULT Invoke(
      [in] ICoreWebView2ExperimentalTextureStream* sender,
      [in] IUnknown* args);
}
/// This is the callback for texture stream rendering error.
[uuid(52cb8898-c711-401a-8f97-3646831ba72d), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalTextureStreamErrorReceivedEventHandler : IUnknown {
  /// Called to provide the implementer with the event args for the
  /// corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2ExperimentalTextureStream* sender,
      [in] ICoreWebView2ExperimentalTextureStreamErrorReceivedEventArgs* args);
}
/// The event args for the `ICoreWebViewTextureStream ErrorReceived` event.
[uuid(0e1730c1-03df-4ad2-b847-be4d63adf700), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalTextureStreamErrorReceivedEventArgs : IUnknown {
  /// The kind of error that has occurred.
  [propget] HRESULT Kind([out, retval]
      COREWEBVIEW2_TEXTURE_STREAM_ERROR_KIND* value);
  /// The texture with which this error is associated. For the
  /// `COREWEBVIEW2_TEXTURE_STREAM_ERROR_KIND` error kind,
  /// this property will be `nullptr`.
  [propget] HRESULT Texture([out, retval] ICoreWebView2ExperimentalTexture** value);
}
/// This is the callback for the browser process's display LUID change.
[uuid(431721e0-0f18-4d7b-bd4d-e5b1522bb110), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalRenderAdapterLUIDChangedEventHandler : IUnknown {
  /// Called to provide the implementer with the event args for the
  /// corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2ExperimentalEnvironment12 * sender,
      [in] IUnknown* args);
}
/// This is the callback for web texture.
[uuid(9ea4228c-295a-11ed-a261-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalTextureStreamWebTextureReceivedEventHandler : IUnknown {
  /// Called to provide the implementer with the event args for the
  /// corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2ExperimentalTextureStream* sender,
      [in] ICoreWebView2ExperimentalTextureStreamWebTextureReceivedEventArgs* args);
}

/// The event args for the `ICoreWebView2TextureStream WebTextureReceived` event.
[uuid(a4c2fa3a-295a-11ed-a261-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalTextureStreamWebTextureReceivedEventArgs : IUnknown {
  /// Return ICoreWebView2ExperimentalWebTexture object.
  [propget] HRESULT WebTexture([out, retval] ICoreWebView2ExperimentalWebTexture** value);
}

/// This is the callback for web texture stop.
[uuid(77eb4638-2f05-11ed-a261-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalTextureStreamWebTextureStreamStoppedEventHandler : IUnknown {
  /// Called to provide the implementer with the event args for the
  /// corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2ExperimentalTextureStream* sender,
      [in] IUnknown* args);
}

/// Received texture that the renderer writes to so that the host
/// will read on it.
[uuid(b94265ae-4c1e-11ed-bdc3-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalWebTexture : IUnknown {
  /// texture handle. The handle's lifetime is owned by the
  /// ICoreWebView2ExperimentalTextureStream object so the host must not close it.
  /// The same handle value will be used for same texture so the host can use
  /// handle value as a unique texture key.
  /// If the host opens its own resources by handle, then it is suggested
  /// that the host removes those resources when the handle's texture size
  /// is changed because the browser also removed previously allocated different
  /// sized textures when image size is changed.
  [propget] HRESULT Handle([out, retval] HANDLE* value);

  /// Direct2D texture resource.
  /// The same resource value will be used for same texture so the host can use
  /// resource value as a unique texture key.
  /// ICoreWebView2ExperimentalTextureStream object has a reference of the resource
  /// so ICoreWebView2ExperimentalWebTexture holds same resource object for
  /// the same texture.
  [propget] HRESULT Resource([out, retval] IUnknown** value);

  /// It is timestamp of the web texture. Javascript can set this value
  /// with any value, but it is suggested to use same value of its original
  /// video frame that is a value of PresentTexture so that the host is able to
  /// tell the receiving texture delta.
  [propget] HRESULT Timestamp([out, retval] UINT64* value);
}

/// This is the ICoreWebView2Experimental22 interface that manages WebView2 Web
/// Notification functionality.
[uuid(6C2FC9EE-83F1-4F0B-80E3-D82AB977E698), object, pointer_default(unique)]
interface ICoreWebView2Experimental22 : IUnknown {
  /// Add an event handler for the `NotificationReceived` event for
  /// non-persistent notifications.
  ///
  /// If a deferral is not taken on the event args, the subsequent scripts after
  /// the DOM notification creation call (i.e. `Notification()`) are blocked
  /// until the event handler returns. If a deferral is taken, the scripts are
  /// blocked until the deferral is completed.
  HRESULT add_NotificationReceived(
      [in] ICoreWebView2ExperimentalNotificationReceivedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);

  /// Remove an event handler previously added with `add_NotificationReceived`.
  HRESULT remove_NotificationReceived(
      [in] EventRegistrationToken token);
}

/// An event handler for the `NotificationReceived` event.
[uuid(89C5D598-8788-423B-BE97-E6E01C0F9EE3), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalNotificationReceivedEventHandler : IUnknown {
  /// Provides the event args for the corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2* sender,
      [in] ICoreWebView2ExperimentalNotificationReceivedEventArgs* args);
}

/// Event args for the `NotificationReceived` event.
/// \snippet ScenarioNotificationReceived.cpp NotificationReceived
[uuid(1512DD5B-5514-4F85-886E-21C3A4C9CFE6), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalNotificationReceivedEventArgs : IUnknown {
  /// The origin of the web content that sends the notification, such as
  /// `https://example.com/` or `https://www.example.com/`.
  ///
  /// The caller must free the returned string with `CoTaskMemFree`.  See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT SenderOrigin([out, retval] LPWSTR* value);

  /// The notification that was received. You can access the
  /// properties on the Notification object to show your own notification.
  [propget] HRESULT Notification([out, retval] ICoreWebView2ExperimentalNotification** value);

  /// Sets whether the `NotificationReceived` event is handled by the host after
  /// the event handler completes or if there is a deferral then after the
  /// deferral is completed.
  ///
  /// If `Handled` is set to TRUE then WebView will not display the notification
  /// with the default UI, and the host will be responsible for handling the
  /// notification and for letting the web content know that the notification
  /// has been displayed, clicked, or closed. You must set `Handled` to `TRUE`
  /// before you call `ReportShown`, `ReportClicked`,
  /// `ReportClickedWithActionIndex` and `ReportClosed`, otherwise they will
  /// fail with `HRESULT_FROM_WIN32(ERROR_INVALID_STATE)`. If after the event
  /// handler or deferral completes `Handled` is set to FALSE then WebView will
  /// display the default notification UI. Note that you cannot un-handle this
  /// event once you have set `Handled` to be `TRUE`. The initial value is
  /// FALSE.
  [propput] HRESULT Handled([in] BOOL value);

  /// Gets whether the `NotificationReceived` event is handled by host.
  [propget] HRESULT Handled([out, retval] BOOL* value);

  /// Returns an `ICoreWebView2Deferral` object. Use this operation to complete
  /// the event at a later time.
  HRESULT GetDeferral([out, retval] ICoreWebView2Deferral** deferral);
}

/// An event handler for the `CloseRequested` event.
[uuid(47C32D23-1E94-4733-85F1-D9BF4ACD0974), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalNotificationCloseRequestedEventHandler : IUnknown {
  /// Provides the event args for the corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2ExperimentalNotification* sender,
      [in] IUnknown* args);
}

/// This is the ICoreWebView2ExperimentalNotification that represents a [HTML Notification
/// object](https://developer.mozilla.org/docs/Web/API/Notification).
[uuid(B7434D98-6BC8-419D-9DA5-FB5A96D4DACD), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalNotification : IUnknown {
  /// Add an event handler for the `CloseRequested` event. This event is raised
  /// when the notification is closed by the web code, such as through
  /// `notification.close()`. You don't need to call `ReportClosed` since this is
  /// coming from the web code.
  HRESULT add_CloseRequested(
      [in] ICoreWebView2ExperimentalNotificationCloseRequestedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);

  /// Remove an event handler previously added with `add_CloseRequested`.
  HRESULT remove_CloseRequested(
      [in] EventRegistrationToken token);

  /// The host may run this to report the notification has been displayed and it
  /// will cause the
  /// [show](https://developer.mozilla.org/docs/Web/API/Notification/show_event)
  /// event to be raised for non-persistent notifications. You must not run this
  /// unless you are handling the `NotificationReceived` event. Returns
  /// `HRESULT_FROM_WIN32(ERROR_INVALID_STATE)` if `Handled` is `FALSE` when
  /// this is called.
  HRESULT ReportShown();

  /// The host may run this to report the notification has been clicked, and it
  /// will cause the
  /// [click](https://developer.mozilla.org/docs/Web/API/Notification/click_event)
  /// event to be raised for non-persistent notifications and the
  /// [notificationclick](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/notificationclick_event)
  /// event for persistent notifications. Use `ReportClickedWithActionIndex` to
  /// specify an action to activate a persistent notification. You must not run
  /// this unless you are handling the `NotificationReceived` event. Returns
  /// `HRESULT_FROM_WIN32(ERROR_INVALID_STATE)` if `Handled` is `FALSE` or
  /// `ReportShown` has not been run when this is called.
  HRESULT ReportClicked();

  /// The host may run this to report the notification was dismissed, and it
  /// will cause the
  /// [close](https://developer.mozilla.org/docs/Web/API/Notification/close_event)
  /// event to be raised for non-persistent notifications and the
  /// [notificationclose](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/notificationclose_event)
  /// event for persistent notifications. You must not run this unless you are
  /// handling the `NotificationReceived` event. Returns
  /// `HRESULT_FROM_WIN32(ERROR_INVALID_STATE)` if `Handled` is `FALSE` or
  /// `ReportShown` has not been run when this is called.
  HRESULT ReportClosed();

  /// A string representing the body text of the notification.
  /// The default value is an empty string.
  ///
  /// The caller must free the returned string with `CoTaskMemFree`.  See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT Body([out, retval] LPWSTR* value);

  /// The text direction in which to display the notification.
  /// This corresponds to
  /// [Notification.dir](https://developer.mozilla.org/docs/Web/API/Notification/dir)
  /// DOM API.
  /// The default value is `COREWEBVIEW2_TEXT_DIRECTION_KIND_DEFAULT`.
  [propget] HRESULT Direction([out, retval] COREWEBVIEW2_TEXT_DIRECTION_KIND* value);

  /// The notification's language, as intended to be specified using a string
  /// representing a language tag (such as `en-US`) according to
  /// [BCP47](https://datatracker.ietf.org/doc/html/rfc5646). Note that no
  /// validation is performed on this property and it can be any string the
  /// notification sender specifies.
  /// This corresponds to
  /// [Notification.lang](https://developer.mozilla.org/docs/Web/API/Notification/lang)
  /// DOM API.
  /// The default value is an empty string.
  ///
  /// The caller must free the returned string with `CoTaskMemFree`.  See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT Language([out, retval] LPWSTR* value);

  /// A string representing an identifying tag for the notification.
  /// This corresponds to
  /// [Notification.tag](https://developer.mozilla.org/docs/Web/API/Notification/tag)
  /// DOM API.
  /// The default value is an empty string.
  ///
  /// The caller must free the returned string with `CoTaskMemFree`.  See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT Tag([out, retval] LPWSTR* value);

  /// A string containing the URI of an icon to be displayed in the
  /// notification.
  /// The default value is an empty string.
  ///
  /// The caller must free the returned string with `CoTaskMemFree`.  See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT IconUri([out, retval] LPWSTR* value);

  /// The title of the notification.
  ///
  /// The caller must free the returned string with `CoTaskMemFree`.  See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT Title([out, retval] LPWSTR* value);

  /// A string containing the URI of the image used to represent the
  /// notification when there isn't enough space to display the notification
  /// itself.
  /// The default value is an empty string.
  ///
  /// The caller must free the returned string with `CoTaskMemFree`.  See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT BadgeUri([out, retval] LPWSTR* value);

  /// A string containing the URI of an image to be displayed in the
  /// notification.
  /// The default value is an empty string.
  ///
  /// The caller must free the returned string with `CoTaskMemFree`.  See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT BodyImageUri([out, retval] LPWSTR* value);

  /// Indicates whether the user should be notified after a new notification
  /// replaces an old one.
  /// This corresponds to
  /// [Notification.renotify](https://developer.mozilla.org/docs/Web/API/Notification/renotify)
  /// DOM API.
  /// The default value is `FALSE`.
  [propget] HRESULT ShouldRenotify([out, retval] BOOL* value);

  /// A boolean value indicating that a notification should remain active until
  /// the user clicks or dismisses it, rather than closing automatically.
  /// This corresponds to
  /// [Notification.requireInteraction](https://developer.mozilla.org/docs/Web/API/Notification/requireInteraction)
  /// DOM API. Note that you may not be able to necessarily implement this due to native API limitations.
  /// The default value is `FALSE`.
  [propget] HRESULT RequiresInteraction([out, retval] BOOL* value);

  /// Indicates whether the notification should be silent -- i.e., no sounds or
  /// vibrations should be issued, regardless of the device settings.
  /// This corresponds to
  /// [Notification.silent](https://developer.mozilla.org/docs/Web/API/Notification/silent)
  /// DOM API.
  /// The default value is `FALSE`.
  [propget] HRESULT IsSilent([out, retval] BOOL* value);

  /// Indicates the time at which a notification is created or applicable (past,
  /// present, or future) as the number of milliseconds since the UNIX epoch.
  [propget] HRESULT Timestamp([out, retval] double* value);

  /// Gets the vibration pattern for devices with vibration hardware to emit.
  /// The vibration pattern can be represented by an array of 64-bit unsigned integers
  /// describing a pattern of vibrations and pauses. See [Vibration
  /// API](https://developer.mozilla.org/docs/Web/API/Vibration_API) for more
  /// information.
  /// This corresponds to
  /// [Notification.vibrate](https://developer.mozilla.org/docs/Web/API/Notification/vibrate)
  /// DOM API.
  /// An empty array is returned if no vibration patterns are
  /// specified.
  HRESULT GetVibrationPattern([out] UINT32* count, [out] UINT64** vibrationPattern);
}

/// Receives the result of the `GetProcessExtendedInfos` method.
/// The result is written to the collection of `ProcessExtendedInfo`s provided
/// in the `GetProcessExtendedInfos` method call.
[uuid(f45e55aa-3bc2-11ee-be56-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalGetProcessExtendedInfosCompletedHandler : IUnknown {
  /// Provides the process extended info list for the `GetProcessExtendedInfos`.
  HRESULT Invoke([in] HRESULT errorCode, [in] ICoreWebView2ExperimentalProcessExtendedInfoCollection* value);
}

/// This is the ICoreWebView2ExperimentalEnvironment13 interface.
[uuid(0f1416a0-3bc3-11ee-be56-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment13 : IUnknown {
  /// Gets a snapshot collection of `ProcessExtendedInfo`s corresponding to all
  /// currently running processes associated with this `CoreWebView2Environment`.
  /// This provides the same list of `ProcessInfo`s as what's provided in
  /// `GetProcessInfos`, which also excludes crashpad process, but additionally
  /// provides a list of associated `FrameInfo`s which are actively running
  /// (showing or hiding UI elements) in the renderer process. See `AssociatedFrameInfos`
  /// for more information.
  ///
  /// \snippet ProcessComponent.cpp GetProcessExtendedInfos
  HRESULT GetProcessExtendedInfos([in] ICoreWebView2ExperimentalGetProcessExtendedInfosCompletedHandler* handler);
}

/// This is the ICoreWebView2ExperimentalProcessExtendedInfo interface
[uuid(af4c4c2e-45db-11ee-be56-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalProcessExtendedInfo : IUnknown {
  /// The process info of the current process.
  [propget] HRESULT ProcessInfo(
    [out, retval] ICoreWebView2ProcessInfo** processInfo);

  /// The collection of associated `FrameInfo`s which are actively running
  /// (showing or hiding UI elements) in this renderer process. `AssociatedFrameInfos`
  /// will only be populated when this `CoreWebView2ProcessExtendedInfo`
  /// corresponds to a renderer process. Non-renderer processes will always
  /// have an empty `AssociatedFrameInfos`. The `AssociatedFrameInfos` may
  /// also be empty for renderer processes that have no active frames.
  ///
  /// \snippet ProcessComponent.cpp AssociatedFrameInfos
  [propget] HRESULT AssociatedFrameInfos(
    [out, retval] ICoreWebView2FrameInfoCollection** frames);
}

/// A list containing processInfo and associated extended information.
[uuid(32efa696-407a-11ee-be56-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalProcessExtendedInfoCollection : IUnknown {
  /// The number of process contained in the `ICoreWebView2ProcessExtendedInfoCollection`.
  [propget] HRESULT Count([out, retval] UINT* count);

  /// Gets the `ICoreWebView2ExperimentalProcessExtendedInfo` located in the
  /// `ICoreWebView2ExperimentalProcessExtendedInfoCollection` at the given index.
  HRESULT GetValueAtIndex([in] UINT32 index,
                          [out, retval] ICoreWebView2ExperimentalProcessExtendedInfo** processInfo);
}

/// This is the ICoreWebView2ExperimentalFrameInfo that provides
/// `ParentFrameInfo`, `FrameId` and `FrameKind` properties.
[uuid(c76ec710-1f6a-11ee-be56-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalFrameInfo : IUnknown {
  /// This parent frame's `FrameInfo`. `ParentFrameInfo` will only be
  /// populated when obtained via calling
  ///`CoreWebView2ProcessExtendedInfo.AssociatedFrameInfos`.
  /// `CoreWebView2FrameInfo` objects obtained via `CoreWebView2.ProcessFailed` will
  /// always have a `null` `ParentFrameInfo`. This property is also `null` for the
  /// main frame in the WebView2 which has no parent frame.
  /// Note that this `ParentFrameInfo` could be out of date as it's a snapshot.
  [propget] HRESULT ParentFrameInfo([out, retval] ICoreWebView2FrameInfo** frameInfo);
  /// The unique identifier of the frame associated with the current `FrameInfo`.
  /// It's the same kind of ID as with the `FrameId` in `CoreWebView2` and via
  /// `CoreWebView2Frame`. `FrameId` will only be populated (non-zero) when obtained
  /// calling `CoreWebView2ProcessExtendedInfo.AssociatedFrameInfos`.
  /// `CoreWebView2FrameInfo` objects obtained via `CoreWebView2.ProcessFailed` will
  /// always have an invalid frame Id 0.
  /// Note that this `FrameId` could be out of date as it's a snapshot.
  /// If there's WebView2 created or destroyed or `FrameCreated/FrameDestroyed`events
  /// after the asynchronous call `CoreWebView2Environment.GetProcessExtendedInfos`
  /// starts, you may want to call asynchronous method again to get the updated `FrameInfo`s.
  [propget] HRESULT FrameId([out, retval] UINT32* id);
  /// The frame kind of the frame. `FrameKind` will only be populated when
  /// obtained calling `CoreWebView2ProcessExtendedInfo.AssociatedFrameInfos`.
  /// `CoreWebView2FrameInfo` objects obtained via `CoreWebView2.ProcessFailed`
  /// will always have the default value `COREWEBVIEW2_FRAME_KIND_UNKNOWN`.
  /// Note that this `FrameKind` could be out of date as it's a snapshot.
  [propget] HRESULT FrameKind([out, retval] COREWEBVIEW2_FRAME_KIND* kind);
}

/// This is the ICoreWebView2ExperimentalFrame5 that provides the `FrameId` property.
[uuid(cfe70560-1f6a-11ee-be56-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalFrame5: IUnknown {
  /// The unique identifier of the current frame. It's the same kind of ID as
  /// with the `FrameId` in `CoreWebView2` and via `CoreWebView2FrameInfo`.
  [propget] HRESULT FrameId([out, retval] UINT32* id);
}

/// This is the ICoreWebView2Experimental23 that provides the `FrameId` property.
[uuid(d69032e2-1f6a-11ee-be56-0242ac120002), object, pointer_default(unique)]
interface ICoreWebView2Experimental23 : IUnknown {
  /// The unique identifier of the main frame. It's the same kind of ID as
  /// with the `FrameId` in `CoreWebView2Frame` and via `CoreWebView2FrameInfo`.
  /// Note that `FrameId` may not be valid if `CoreWebView` has not done
  /// any navigation. It's safe to get this value during or after the first
  /// `ContentLoading` event. Otherwise, it could return the invalid frame Id 0.
  [propget] HRESULT FrameId([out, retval] UINT32* id);
}

/// A continuation of the ICoreWebView2ProcessFailedEventArgs2 interface
/// fot getting blocked file for code integrity process failures.
[uuid(a9fc1af8-f934-4f0f-a788-7be0808c329b), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalProcessFailedEventArgs : IUnknown {
    /// This property is the full path of the module that caused the
    /// crash in cases of Windows Code Integrity failures.
    /// [Windows Code Integrity](/mem/intune/user-help/you-need-to-enable-code-integrity)
    /// is a feature that verifies the integrity and
    /// authenticity of dynamic-link libraries (DLLs)
    /// on Windows systems. It ensures that only trusted
    /// code can run on the system and prevents unauthorized or
    /// malicious modifications.
    /// When ProcessFailed occurred due to a failed Code Integrity check,
    /// this property returns the full path of the file that was prevented from
    /// loading on the system.
    /// The webview2 process which tried to load the DLL will fail with
    /// exit code STATUS_INVALID_IMAGE_HASH(-1073740760).
    /// A file can fail integrity check for various
    /// reasons, such as:
    /// - It has an invalid or missing signature that does
    /// not match the publisher or signer of the file.
    /// - It has been tampered with or corrupted by malware or other software.
    /// - It has been blocked by an administrator or a security policy.
    /// This property always will be the empty string if failure is not caused by
    /// STATUS_INVALID_IMAGE_HASH.
    [propget] HRESULT FailureSourceModulePath([out, retval] LPWSTR* modulePath);
}

// End of interfaces

}
